#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****


# define source directories
sDataDir = GetProcessErrorFileDirectory() | '..\data';
sMetadataPath = sDataDir | '\source_files\metadata';
sDataPath = sDataDir | '\source_files\data';
sRulePath = sDataDir | '\source_files\rules';
sRulesFiles = sDataDir | '\*.RUX';
sDimensionalityFile = sMetadataPath | '\cubes_dimensionality.csv';

# create source_files directories
ExecuteProcess('}bedrock.server.executecommand',
  'pLogOutput',0,
  'pStrictErrorHandling',0,
  'pCommand','mkdir ' | sMetadataPath,
  'pWait',1,
  'pPowerShell',0);
ExecuteProcess('}bedrock.server.executecommand',
  'pLogOutput',0,
  'pStrictErrorHandling',0,
  'pCommand','mkdir ' | sDataPath,
  'pWait',1,
  'pPowerShell',0);
ExecuteProcess('}bedrock.server.executecommand',
  'pLogOutput',0,
  'pStrictErrorHandling',0,
  'pCommand','mkdir ' | sRulePath,
  'pWait',1,
  'pPowerShell',0);


# export hierarchies and attributes
sDimName='}Dimensions';
n = 1;
# loop through all dimensions
While(n <= DimSiz(sDimName));
  sElName = DimNm(sDimName, n);
  if(Scan('}',sElName) = 0);
    # export only non-control dimensions with attributes
    if(CubeExists('}ElementAttributes_' | sElName) = 1);
      ExecuteProcess('}bedrock.hier.export',
        'pLogOutput',0,
        'pStrictErrorHandling',0,
        'pDim',sElName,
        'pHier','',
        'pTgtDir',sMetadataPath,
        'pTgtFile',sElName | '.csv',
        'pTitleRecord',1,
        'pDelim',',',
        'pQuote','"',
        'pLegacy',0,
        'pCharacterSet','');
    endif;
  endif;
  n = n + 1;
End;

# export data
ASCIIOutput(sDimensionalityFile, 'cube_name', 'dimensionality');
sDimName='}Cubes';
n = 1;
# loop through all cubes
While(n <= DimSiz(sDimName));
  sElName = DimNm(sDimName, n);
  if(Scan('}',sElName) = 0);
    
    # export dimensionality
    sCubeName = sElName;
    vDimensionality = '';
    j = 1;
    nMax = CubeDimensionCountGet( sCubeName );
    While( j <= nMax );
      vDimName = TabDim( sCubeName, j );
      vDimensionality = vDimensionality | vDimName | '&';
      j = j + 1;
    End;
    vDimensionality = Delet(vDimensionality,Long(vDimensionality),1);
    ASCIIOutput(sDimensionalityFile, sCubeName, vDimensionality);
    
    # export non-control cube data
    ExecuteProcess('}bedrock.cube.data.export',
      'pLogoutput',0,
      'pStrictErrorHandling',0,
      'pCube',sElName,
      'pView','',
      'pFilter','',
      'pFilterParallel','',
      'pParallelThreads',0,
      'pDimDelim','&',
      'pEleStartDelim','Â¦',
      'pEleDelim','+',
      'pSuppressZero',1,
      'pSuppressConsol',1,
      'pSuppressRules',1,
      'pSuppressConsolStrings',0,
      'pZeroSource',0,
      'pCubeLogging',0,
      'pTemp',1,
      'pFilePath',sDataPath,
      'pFileName',sElName | '.csv',
      'pDelim',',',
      'pDecimalSeparator','.',
      'pThousandSeparator',',',
      'pQuote','"',
      'pTitleRecord',1,
      'pSandbox','',
      'pSubN',0,
      'pCharacterSet','',
      'pCubeNameExport',1);
    endif;
  n = n + 1;
End;

# export rules
sStrFile = WildcardFileSearch (sRulesFiles, '');
while ( sStrFile @<> '');
  cmd = 'copy ' | sDataDir | '\' | sStrFile | ' ' | sRulePath | '\' | sStrFile;
  if (Scan('.RUX', Upper(sStrFile)) <> 0 );
    ExecuteProcess('}bedrock.server.executecommand',
      'pLogOutput',0,
      'pStrictErrorHandling',0,
      'pCommand',cmd,
      'pWait',1,
      'pPowerShell',0);
	endif;
  sStrFile = WildcardFileSearch ( sRulesFiles, sStrFile );
end;
#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion